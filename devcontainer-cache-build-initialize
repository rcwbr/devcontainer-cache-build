#!/bin/bash

set -e


# Accept an override for the devcontainer-cache-build image
DEVCONTAINER_CACHE_BUILD_IMAGE="${DEVCONTAINER_CACHE_BUILD_IMAGE:=ghcr.io/rcwbr/devcontainer-cache-build:0.1.2}"


###### Handle repeated call to devcontainer up ######

if [[ -z ${DEVCONTAINER_INITIALIZE_PID+x} ]]; then
  echo "DEVCONTAINER_INITIALIZE_PID undefined; will not check for --expect-existing-container, instead will assume that a build is required."
else
  set +e
  # Get the PID of the process that called initialize
  INITIALIZE_CALLER_PID="$(ps -o ppid= ${DEVCONTAINER_INITIALIZE_PID})"
  # Strip whitespace from the PID value
  INITIALIZE_CALLER_PID=${INITIALIZE_CALLER_PID// /}
  cat /proc/${INITIALIZE_CALLER_PID}/cmdline | grep -q "expect-existing-container"
  EXPECT_EXISTING_CONTAINER=$?
  set -e
  if [[ $EXPECT_EXISTING_CONTAINER == 0 ]]; then
    echo "devcontainer up command includes --expect-existing-container, indicating that it is a repeat call after the intial build. Exiting, as no build is required in this case."
    exit 0
  fi
fi


###### Delegate remaining initialize behavior to the container ######

echo "Executing devcontainer-cache-build containerized image build"
docker run \
  --rm \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v $(pwd):$(pwd):ro \
  -w $(pwd) \
  -e DEVCONTAINER_IMAGE \
  -e DEVCONTAINER_BUILD_ADDITIONAL_ARGS \
  -e DEVCONTAINER_CACHE_FROMS \
  -e DEVCONTAINER_CACHE_TOS \
  -e DEVCONTAINER_CONTEXT \
  -e DEVCONTAINER_DEFAULT_BRANCH_NAME \
  -e DEVCONTAINER_DEFINITION_TYPE \
  -e DEVCONTAINER_DEFINITION_FILES \
  -e DEVCONTAINER_OUTPUTS \
  -e DEVCONTAINER_PREBUILD_SCRIPT \
  -e DEVCONTAINER_PUSH_IMAGE \
  -e DEVCONTAINER_REGISTRY \
  --env-file <(env | sed 's/^/DEVCONTAINER_HOST_/') \
  "$DEVCONTAINER_CACHE_BUILD_IMAGE"
